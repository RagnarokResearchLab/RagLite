local KeyframeAnimation = require("Core.NativeClient.KeyframeAnimation")

describe("KeyframeAnimation", function()
	describe("Construct", function()
		it("should initialize the animation in a disabled state", function()
			local animation = KeyframeAnimation("TestAnimation", 30)
			assertFalse(animation.isPlaying)
			assertEquals(animation.keyframes, {})
			assertEquals(animation.currentFrame, 0)
			assertEquals(animation.displayName, "TestAnimation")
			assertEquals(animation.elapsedTimeInMilliseconds, 0)
			assertEquals(animation.framesPerSecond, 30)

			animation = KeyframeAnimation()
			assertEquals(animation.framesPerSecond, 60)
		end)
	end)

	describe("Start", function()
		it("should enable the default playback mode if no arguments were passed", function()
			local animation = KeyframeAnimation()
			animation:Start()
			assertTrue(animation.isPlaying)
			assertEquals(animation.loopMode, KeyframeAnimation.LOOP_MODE_REPEAT)
			assertEquals(animation.direction, KeyframeAnimation.PLAYBACK_DIRECTION_FORWARD)
			assertEquals(animation.interpolationMode, KeyframeAnimation.INTERPOLATION_MODE_NONE)
		end)
	end)

	describe("Stop", function()
		it("should disable playback and reset the playback state of the animation", function()
			local animation = KeyframeAnimation()
			animation.isPlaying = true
			animation.currentFrame = 42
			animation.elapsedTimeInMilliseconds = 42
			animation:Stop()
			assertFalse(animation.isPlaying)
			assertEquals(animation.currentFrame, 0)
			assertEquals(animation.elapsedTimeInMilliseconds, 0)
			
		end)
	end)

	describe("Get")

	describe("UpdateWithDeltaTime", function()
		it("should have no effect if playback is disabled", function()
			local animation = KeyframeAnimation()
			animation:Stop()
			animation:UpdateWithDeltaTime(420000)
			assertEquals(animation.currentFrame, 0)
			assertEquals(animation.elapsedTimeInMilliseconds, 0)
		end)

		-- it("should advance the animation state if playback is enabled", function()
		-- 	local animation = KeyframeAnimation()
		-- 	animation:Start()
		-- 	animation:UpdateWithDeltaTime(20)
		-- 	assertEquals(animation.currentFrame, 0)
		-- 	-- local animationDurationInMilliseconds = (animation.framesPerSecond / 1000)
		-- 	assertEquals(animation.elapsedTimeInMilliseconds, 20)
		-- end)

		-- it("should loop from the beginning  if playback is enabled", function()
		-- 	local animation = KeyframeAnimation()
		-- 	animation:Start()
		-- 	animation:UpdateWithDeltaTime(420000)
		-- 	assertEquals(animation.currentFrame, 0)
		-- 	local animationDurationInMilliseconds = (animation.framesPerSecond / 1000)
		-- 	assertEquals(animation.elapsedTimeInMilliseconds, 420000 % animationDurationInMilliseconds)
		-- end)
	end)
end)

-- local plane = AnimatedWaterPlane()
-- assertFalse(plane.cyclingTextureAnimation.isPlaying)
-- assertEquals(plane.cyclingTextureAnimation.currentFrame, 0)
-- assertEquals(plane.cyclingTextureAnimation.totalDurationInMilliseconds, 1600)
-- assertTrue(instanceof(plane.cyclingTextureAnimation, KeyframeAnimation))
-- 	describe("UpdateTextureAnimation", function()
-- 		it("should not advance the keyframe if the delta time is zero", function() end)
-- 		it("should compute the keyframe based on the given delta time")
-- 		local plane = AnimatedWaterPlane()
-- 		assertEquals(plane.cyclingTextureAnimation.currentFrame)
-- 	end)
