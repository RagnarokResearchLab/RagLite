local ffi = require("ffi")

local Texture = require("Core.NativeClient.WebGPU.Texture")

describe("Texture", function()
	describe("GenerateSimpleGradientImage", function()
		it("should return the RGBA pixel data for a linear rainbow gradient", function()
			local rgbaImageBytes = Texture:GenerateSimpleGradientImage()
			local imageFilePath = path.join("Tests", "Fixtures", "gradient-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)
	end)

	describe("GenerateBlankImage", function()
		it("should return the RGBA pixel data for a solid white grid texture", function()
			local rgbaImageBytes = Texture:GenerateBlankImage()
			local imageFilePath = path.join("Tests", "Fixtures", "blank-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)
	end)

	describe("GenerateCheckeredGridImage", function()
		it("should return the RGBA pixel data for a black-and-white grid texture if no colors were passed", function()
			local rgbaImageBytes = Texture:GenerateCheckeredGridImage()
			local imageFilePath = path.join("Tests", "Fixtures", "grid-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)

		it("should return the RGBA pixel data for a matching grid texture if two colors were passed", function()
			local firstColor = { red = 187 / 255, green = 70 / 255, blue = 75 / 255 }
			local secondColor = { red = 78 / 255, green = 81 / 255, blue = 120 / 255 }
			local rgbaImageBytes = Texture:GenerateCheckeredGridImage(firstColor, secondColor)
			local imageFilePath = path.join("Tests", "Fixtures", "colored-grid-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)
	end)
end)
