local ffi = require("ffi")

local Texture = require("Core.NativeClient.WebGPU.Texture")

describe("Texture", function()
	describe("GenerateSimpleGradientImage", function()
		it("should return the RGBA pixel data for a linear rainbow gradient", function()
			local rgbaImageBytes = Texture:GenerateSimpleGradientImage()
			local imageFilePath = path.join("Tests", "Fixtures", "gradient-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)

		it("should throw if the dimensions aren't a power of two", function()
			assertThrows(function()
				Texture:GenerateSimpleGradientImage(13, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateSimpleGradientImage(128, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateSimpleGradientImage(13, 128)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)
		end)
	end)

	describe("GenerateBlankImage", function()
		it("should return the RGBA pixel data for a solid white grid texture", function()
			local rgbaImageBytes = Texture:GenerateBlankImage()
			local imageFilePath = path.join("Tests", "Fixtures", "blank-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)
		it("should throw if the dimensions aren't a power of two", function()
			assertThrows(function()
				Texture:GenerateBlankImage(13, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateBlankImage(128, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateBlankImage(13, 128)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)
		end)
	end)

	describe("IsPowerOfTwo", function()
		it("should return false if zero is passed", function()
			-- This is a known failure case of the typical bit-fiddling trick used
			assertFalse(Texture:IsPowerOfTwo(0))
		end)

		it("should return false if negative numbers are passed", function()
			assertFalse(Texture:IsPowerOfTwo(-1))
			assertFalse(Texture:IsPowerOfTwo(-2))
			assertFalse(Texture:IsPowerOfTwo(-4))
			assertFalse(Texture:IsPowerOfTwo(-16))
			assertFalse(Texture:IsPowerOfTwo(-32))
			assertFalse(Texture:IsPowerOfTwo(-64))
			assertFalse(Texture:IsPowerOfTwo(-128))
			assertFalse(Texture:IsPowerOfTwo(-256))
			assertFalse(Texture:IsPowerOfTwo(-512))
			assertFalse(Texture:IsPowerOfTwo(-1024))
			assertFalse(Texture:IsPowerOfTwo(-2048))
			assertFalse(Texture:IsPowerOfTwo(-4096))
			assertFalse(Texture:IsPowerOfTwo(-8192))
			assertFalse(Texture:IsPowerOfTwo(-16384))
			assertFalse(Texture:IsPowerOfTwo(-32768))
			assertFalse(Texture:IsPowerOfTwo(-65536))
		end)

		it("should return true for all relevant power-of-two dimensions", function()
			assertTrue(Texture:IsPowerOfTwo(1))
			assertTrue(Texture:IsPowerOfTwo(2))
			assertTrue(Texture:IsPowerOfTwo(4))
			assertTrue(Texture:IsPowerOfTwo(16))
			assertTrue(Texture:IsPowerOfTwo(32))
			assertTrue(Texture:IsPowerOfTwo(64))
			assertTrue(Texture:IsPowerOfTwo(128))
			assertTrue(Texture:IsPowerOfTwo(256))
			assertTrue(Texture:IsPowerOfTwo(1024))
			assertTrue(Texture:IsPowerOfTwo(2048))
			assertTrue(Texture:IsPowerOfTwo(4096))
			assertTrue(Texture:IsPowerOfTwo(8192))
			assertTrue(Texture:IsPowerOfTwo(16384))
			assertTrue(Texture:IsPowerOfTwo(32768))
			assertTrue(Texture:IsPowerOfTwo(65536))
		end)
	end)

	describe("GenerateCheckeredGridImage", function()
		it("should return the RGBA pixel data for a black-and-white grid texture if no colors were passed", function()
			local rgbaImageBytes = Texture:GenerateCheckeredGridImage(256, 256)
			local imageFilePath = path.join("Tests", "Fixtures", "grid-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)

		it("should return the RGBA pixel data for a matching grid texture if two colors were passed", function()
			local firstColor = { red = 187 / 255, green = 70 / 255, blue = 75 / 255 }
			local secondColor = { red = 78 / 255, green = 81 / 255, blue = 120 / 255 }
			local rgbaImageBytes = Texture:GenerateCheckeredGridImage(256, 256, firstColor, secondColor)
			local imageFilePath = path.join("Tests", "Fixtures", "colored-grid-texture.png")
			local pngImageBytes = C_FileSystem.ReadFile(imageFilePath)
			local expectedPixelData = C_ImageProcessing.DecodeFileContents(pngImageBytes)
			assertEquals(ffi.string(rgbaImageBytes, 256 * 256 * 4), expectedPixelData)
		end)

		it("should throw if the dimensions aren't a power of two", function()
			assertThrows(function()
				Texture:GenerateCheckeredGridImage(13, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateCheckeredGridImage(128, 37)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)

			assertThrows(function()
				Texture:GenerateCheckeredGridImage(13, 128)
			end, Texture.ERROR_DIMENSIONS_NOT_POWER_OF_TWO)
		end)
	end)
end)
