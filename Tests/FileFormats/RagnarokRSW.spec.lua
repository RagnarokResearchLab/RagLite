local QuadTreeRange = require("Core.FileFormats.RSW.QuadTreeRange")
local RagnarokRSW = require("Core.FileFormats.RagnarokRSW")

local RSW_V1_9_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0109.rsw"))
local RSW_V2_1_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0201.rsw"))
local RSW_V2_2_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0202.rsw"))
-- 2.3 and 2.4 skipped for now, as there are no discernible (i.e., surface-level) changes in the format
local RSW_V2_5_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0205.rsw"))
local RSW_V2_6_WITHOUT_FLAG_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0206-no-rsm2-flag.rsw"))
local RSW_V2_6_WITH_FLAG_EXAMPLE = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0206-with-rsm2-flag.rsw"))

-- This won't catch issues with the quad tree decoding, but there's other tests for that
local GENERATED_QUADTREE_BYTES = QuadTreeRange:CreateNormalizedDebugTree()

describe("RagnarokRSW", function()
	describe("DecodeFileContents", function()
		it("should be able to decode RSW files using version 1.9 of the format", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V1_9_EXAMPLE)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 1.9)
			assertEquals(rsw.buildNumber, 0)
			assertEquals(rsw.unknownRenderFlag, 0)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 1)
			assertEquals(rsw.numWaterPlanesU, 1)
			assertEquals(rsw.numWaterPlanesV, 1)
			assertEquals(rsw.waterPlanes[1].normalizedSeaLevel, -100)
			assertEquals(rsw.waterPlanes[1].textureTypePrefix, 0)
			assertEquals(rsw.waterPlanes[1].waveformAmplitudeScalingFactor, 1)
			assertEquals(rsw.waterPlanes[1].waveformPhaseShiftInDegreesPerFrame, 2)
			assertEquals(rsw.waterPlanes[1].waveformFrequencyInDegrees, 37)
			assertEquals(rsw.waterPlanes[1].textureDisplayDurationInFrames, 4)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEquals(rsw.prebakedShadowmapAlpha, 0.5)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 0)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 0)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 6000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 6000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph, {})
		end)

		it("should be able to decode RSW files using version 2.1 of the format", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V2_1_EXAMPLE .. GENERATED_QUADTREE_BYTES)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 2.1)
			assertEquals(rsw.buildNumber, 0)
			assertEquals(rsw.unknownRenderFlag, 0)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 1)
			assertEquals(rsw.numWaterPlanesU, 1)
			assertEquals(rsw.numWaterPlanesV, 1)
			assertEquals(rsw.waterPlanes[1].normalizedSeaLevel, -100)
			assertEquals(rsw.waterPlanes[1].textureTypePrefix, 0)
			assertEquals(rsw.waterPlanes[1].waveformAmplitudeScalingFactor, 1)
			assertEquals(rsw.waterPlanes[1].waveformPhaseShiftInDegreesPerFrame, 2)
			assertEquals(rsw.waterPlanes[1].waveformFrequencyInDegrees, 37)
			assertEquals(rsw.waterPlanes[1].textureDisplayDurationInFrames, 4)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEquals(rsw.prebakedShadowmapAlpha, 0.5)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 0)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 0)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 256 * 1000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 128 * 1000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph:GetBinaryStorageSize(), 65520) -- This will have to do (for now)
		end)

		it("should be able to decode RSW files using version 2.2 of the format", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V2_2_EXAMPLE .. GENERATED_QUADTREE_BYTES)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 2.2)
			assertEquals(rsw.buildNumber, 42)
			assertEquals(rsw.unknownRenderFlag, 0)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 1)
			assertEquals(rsw.numWaterPlanesU, 1)
			assertEquals(rsw.numWaterPlanesV, 1)
			assertEquals(rsw.waterPlanes[1].normalizedSeaLevel, -100)
			assertEquals(rsw.waterPlanes[1].textureTypePrefix, 0)
			assertEquals(rsw.waterPlanes[1].waveformAmplitudeScalingFactor, 1)
			assertEquals(rsw.waterPlanes[1].waveformPhaseShiftInDegreesPerFrame, 2)
			assertEquals(rsw.waterPlanes[1].waveformFrequencyInDegrees, 37)
			assertEquals(rsw.waterPlanes[1].textureDisplayDurationInFrames, 4)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEquals(rsw.prebakedShadowmapAlpha, 0.5)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 0)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 0)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 256 * 1000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 128 * 1000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph:GetBinaryStorageSize(), 65520) -- This will have to do (for now)
		end)

		it("should be able to decode RSW files using version 2.5 of the format", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V2_5_EXAMPLE .. GENERATED_QUADTREE_BYTES)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 2.5)
			assertEquals(rsw.buildNumber, 160)
			assertEquals(rsw.unknownRenderFlag, 1)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 1)
			assertEquals(rsw.numWaterPlanesU, 1)
			assertEquals(rsw.numWaterPlanesV, 1)
			assertEquals(rsw.waterPlanes[1].normalizedSeaLevel, -100)
			assertEquals(rsw.waterPlanes[1].textureTypePrefix, 0)
			assertEquals(rsw.waterPlanes[1].waveformAmplitudeScalingFactor, 1)
			assertEquals(rsw.waterPlanes[1].waveformPhaseShiftInDegreesPerFrame, 2)
			assertEquals(rsw.waterPlanes[1].waveformFrequencyInDegrees, 37)
			assertEquals(rsw.waterPlanes[1].textureDisplayDurationInFrames, 4)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEquals(rsw.prebakedShadowmapAlpha, 0.5)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 0)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 0)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 256 * 1000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 128 * 1000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph:GetBinaryStorageSize(), 65520) -- This will have to do (for now)
		end)

		it("should be able to decode RSW files using version 2.6 without unknown flag", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V2_6_WITHOUT_FLAG_EXAMPLE .. GENERATED_QUADTREE_BYTES)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 2.6)
			assertEquals(rsw.buildNumber, 161)
			assertEquals(rsw.unknownRenderFlag, 17)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 0)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.prebakedShadowmapAlpha, 0.5, 1E-3)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 0)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 0)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 256 * 1000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 128 * 1000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph:GetBinaryStorageSize(), 65520) -- This will have to do (for now)
		end)

		it("should be able to decode RSW files using version 2.6 with unknown flag", function()
			local rsw = RagnarokRSW()
			rsw:DecodeFileContents(RSW_V2_6_WITH_FLAG_EXAMPLE .. GENERATED_QUADTREE_BYTES)

			assertEquals(rsw.signature, "GRSW")
			assertEquals(rsw.version, 2.6)
			assertEquals(rsw.buildNumber, 162)
			assertEquals(rsw.unknownRenderFlag, 33)

			assertEquals(rsw.iniFile, "")
			assertEquals(rsw.gndFile, "v0109.gnd")
			assertEquals(rsw.gatFile, "v0109.gat")
			assertEquals(rsw.scrFile, "")

			assertEquals(#rsw.waterPlanes, 0)

			assertEquals(rsw.directionalLight.longitudeInDegrees, 45)
			assertEquals(rsw.directionalLight.latitudeInDegrees, 0)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.directionalLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.red, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.green, 0.35, 1E-3)
			assertEqualNumbers(rsw.ambientLight.diffuseColor.blue, 0.35, 1E-3)
			assertEqualNumbers(rsw.prebakedShadowmapAlpha, 0.5, 1E-3)

			assertEqualNumbers(rsw.contrastCorrectionColor.red, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.green, 0.5775, 1E-3)
			assertEqualNumbers(rsw.contrastCorrectionColor.blue, 0.5775, 1E-3)

			assertEquals(rsw.boundingBox.top, 12)
			assertEquals(rsw.boundingBox.bottom, 777)
			assertEquals(rsw.boundingBox.left, 512)
			assertEquals(rsw.boundingBox.right, 1)

			assertEquals(rsw.numSceneObjects, 8)

			assertEquals(#rsw.animatedProps, 2)
			assertEquals(rsw.animatedProps[1].name, "Doodad1")
			assertEquals(rsw.animatedProps[1].animationTypeID, RagnarokRSW.ANIMATION_TYPE_ONCE)
			assertEquals(rsw.animatedProps[1].animationSpeedPercentage, 1.5)
			assertEquals(rsw.animatedProps[1].isSolid, false)
			assertEquals(rsw.animatedProps[1].rsmFile, "test\\model1.rsm")
			assertEquals(rsw.animatedProps[1].rsmNodeName, "NodeName1")
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.x, 0.2 * 1)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.y, -0.2 * 2)
			assertEquals(rsw.animatedProps[1].normalizedWorldPosition.z, 0.2 * 3)
			assertEquals(rsw.animatedProps[1].rotation.x, 0)
			assertEquals(rsw.animatedProps[1].rotation.y, 0)
			assertEquals(rsw.animatedProps[1].rotation.z, 0)
			assertEquals(rsw.animatedProps[1].scale.x, 1)
			assertEquals(rsw.animatedProps[1].scale.y, 1)
			assertEquals(rsw.animatedProps[1].scale.z, 1)
			assertEquals(rsw.animatedProps[1].unknownMysteryByte, 171)

			assertEquals(rsw.animatedProps[2].name, "Doodad2")
			assertEquals(rsw.animatedProps[2].animationTypeID, RagnarokRSW.ANIMATION_TYPE_LOOPING)
			assertEquals(rsw.animatedProps[2].animationSpeedPercentage, 2.5)
			assertEquals(rsw.animatedProps[2].isSolid, false)
			assertEquals(rsw.animatedProps[2].rsmFile, "ModelName2")
			assertEquals(rsw.animatedProps[2].rsmNodeName, "NodeName2")
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.x, 0.2 * 4)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.y, -0.2 * 5)
			assertEquals(rsw.animatedProps[2].normalizedWorldPosition.z, 0.2 * 6)
			assertEqualNumbers(rsw.animatedProps[2].rotation.x, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.y, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].rotation.z, 0.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.x, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.y, 1.1, 1E-3)
			assertEqualNumbers(rsw.animatedProps[2].scale.z, 1.1, 1E-3)
			assertEquals(rsw.animatedProps[2].unknownMysteryByte, 188)

			assertEquals(#rsw.dynamicLightSources, 2)
			assertEquals(rsw.dynamicLightSources[1].name, "Light1")
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.dynamicLightSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.red, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.green, 0.7, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[1].diffuseColor.blue, 0.6, 1E-3)
			assertEquals(rsw.dynamicLightSources[1].normalizedFalloffDistanceInWorldUnits, 0.2 * 50)

			assertEquals(rsw.dynamicLightSources[2].name, "Light2")
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.dynamicLightSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.red, 0.9, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.green, 0.8, 1E-3)
			assertEqualNumbers(rsw.dynamicLightSources[2].diffuseColor.blue, 0.7, 1E-3)
			assertEquals(rsw.dynamicLightSources[2].normalizedFalloffDistanceInWorldUnits, 0.2 * 75)

			assertEquals(#rsw.spatialAudioSources, 2)
			assertEquals(rsw.spatialAudioSources[1].name, "Audio1")
			assertEquals(rsw.spatialAudioSources[1].soundFile, "apath\\to\\sound1.wav")
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.spatialAudioSources[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEqualNumbers(rsw.spatialAudioSources[1].volumeGain, 0.7, 1E-3)
			assertEquals(rsw.spatialAudioSources[1].width, 100)
			assertEquals(rsw.spatialAudioSources[1].height, 200)
			assertEquals(rsw.spatialAudioSources[1].normalizedRangeInWorldUnits, 0.2 * 50)
			assertEquals(rsw.spatialAudioSources[1].cycleIntervalInMilliseconds, 256 * 1000)

			assertEquals(rsw.spatialAudioSources[2].name, "Audio2")
			assertEquals(rsw.spatialAudioSources[2].soundFile, "/path/to/sound2.wav")
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.spatialAudioSources[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEqualNumbers(rsw.spatialAudioSources[2].volumeGain, 0.9, 1E-3)
			assertEquals(rsw.spatialAudioSources[2].width, 300)
			assertEquals(rsw.spatialAudioSources[2].height, 400)
			assertEquals(rsw.spatialAudioSources[2].normalizedRangeInWorldUnits, 0.2 * 75)
			assertEquals(rsw.spatialAudioSources[2].cycleIntervalInMilliseconds, 128 * 1000)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[1].name, "Emitter1")
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.x, 0.2 * 10)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.y, -0.2 * 20)
			assertEquals(rsw.particleEffectEmitters[1].normalizedWorldPosition.z, 0.2 * 30)
			assertEquals(rsw.particleEffectEmitters[1].effectID, 1)
			assertEqualNumbers(rsw.particleEffectEmitters[1].emissionDelayInMilliseconds, 1000 / 60 * 1.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[1].launchParameters, 4)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[1], 0.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[2], 1)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[3], 1.5)
			assertEquals(rsw.particleEffectEmitters[1].launchParameters[4], 2)

			assertEquals(#rsw.particleEffectEmitters, 2)
			assertEquals(rsw.particleEffectEmitters[2].name, "Emitter2")
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.x, 0.2 * 40)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.y, -0.2 * 50)
			assertEquals(rsw.particleEffectEmitters[2].normalizedWorldPosition.z, 0.2 * 60)
			assertEquals(rsw.particleEffectEmitters[2].effectID, 2)
			assertEqualNumbers(rsw.particleEffectEmitters[2].emissionDelayInMilliseconds, 1000 / 60 * 2.5, 1E-3)
			assertEquals(#rsw.particleEffectEmitters[2].launchParameters, 4)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[1], 0.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[2], 1.1, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[3], 1.6, 1E-3)
			assertEqualNumbers(rsw.particleEffectEmitters[2].launchParameters[4], 2.1, 1E-3)

			assertEquals(rsw.sceneGraph:GetBinaryStorageSize(), 65520) -- This will have to do (for now)
		end)
	end)
end)
