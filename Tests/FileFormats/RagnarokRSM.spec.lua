local RagnarokRSM = require("Core.FileFormats.RagnarokRSM")

local RSM_EXAMPLE_FILE_0104 = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0104.rsm"))
local RSM_EXAMPLE_FILE_0105 = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0105.rsm"))
local RSM_EXAMPLE_FILE_0202 = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0202.rsm2"))
local RSM_EXAMPLE_FILE_0203 = C_FileSystem.ReadFile(path.join("Tests", "Fixtures", "v0203.rsm2"))

describe("RagnarokRSM", function()
	describe("DecodeFileContents", function()
		it("should throw if the RSM version is not supported", function()
			local rsm = RagnarokRSM()
			local rsmBytes = "GRSM\001\000"
			local function decodeUnexpectedVersionRSM()
				rsm:DecodeFileContents(rsmBytes)
			end

			local expectedErrorMessage = "Unsupported RSM version 1.0"
			assertThrows(decodeUnexpectedVersionRSM, expectedErrorMessage)
		end)

		it("should throw if the given file is not an RSM or RSM2 file", function()
			local rsm = RagnarokRSM()
			local rsmBytes = "GRGN\001\000"
			local function decodeUnexpectedVersionRSM()
				rsm:DecodeFileContents(rsmBytes)
			end

			local expectedErrorMessage = 'Failed to decode RSM header (Signature GRGN should be "GRSM")'
			assertThrows(decodeUnexpectedVersionRSM, expectedErrorMessage)
		end)

		it("should throw if there are unaccounted leftover bytes at the end of the file", function()
			local rsm = RagnarokRSM()
			local rsmBytes = RSM_EXAMPLE_FILE_0104 .. "\000\000\000\000"
			local function decodeUnexpectedVersionRSM()
				rsm:DecodeFileContents(rsmBytes)
			end

			local expectedErrorMessage = "Detected 4 leftover bytes at the end of the structure"
			assertThrows(decodeUnexpectedVersionRSM, expectedErrorMessage)
		end)

		it("should be able to decode RSM files using version 1.4 of the format", function()
			local rsm = RagnarokRSM()
			rsm:DecodeFileContents(RSM_EXAMPLE_FILE_0104)

			assertEquals(rsm.signature, "GRSM")
			assertEquals(rsm.version, 1.4)
			assertEquals(rsm.animationDurationInMilliseconds, 6000)
			assertEquals(rsm.shadingModeID, RagnarokRSM.SHADING_MODE_UNLIT)
			assertEquals(rsm.opacity, 1)

			assertEquals(#rsm.texturePaths, 2)
			assertEquals(rsm.texturePaths[1], "dir/tex1.bmp")
			assertEquals(rsm.texturePaths[2], "asdf/texture.bmp")

			assertEquals(#rsm.rootNodes, 1)
			assertEquals(rsm.rootNodes[1], "TransformationRoot")
			assertEquals(#rsm.meshes, 1)

			assertEquals(rsm.meshes[1].name, "TransformationRoot")
			assertEquals(rsm.meshes[1].parentNodeName, "")
			assertEquals(#rsm.meshes[1].texturePaths, 0)
			assertEquals(#rsm.meshes[1].textureIndices, 2)
			assertEquals(rsm.meshes[1].textureIndices[1], 0)
			assertEquals(rsm.meshes[1].textureIndices[2], 1)

			assertEquals(rsm.meshes[1].initialPlacementMatrix.x1, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y3, -1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z2, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w4, 1)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.x, -1.87600004673, 1E-3)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.y, -25, 1E-3)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.z, -55.540000915527, 1E-3)
			assertEquals(rsm.meshes[1].rotationAngleInRadians, 0)
			assertEquals(rsm.meshes[1].rotationAxis.x, 0)
			assertEquals(rsm.meshes[1].rotationAxis.y, 0)
			assertEquals(rsm.meshes[1].rotationAxis.z, 0)
			assertEquals(rsm.meshes[1].scale.x, 1)
			assertEquals(rsm.meshes[1].scale.y, 1)
			assertEquals(rsm.meshes[1].scale.z, 1)

			assertEquals(#rsm.meshes[1].vertices, 3)
			assertEquals(rsm.meshes[1].vertices[1].x, 100)
			assertEquals(rsm.meshes[1].vertices[1].y, 200)
			assertEquals(rsm.meshes[1].vertices[1].z, 300)
			assertEquals(rsm.meshes[1].vertices[2].x, 400)
			assertEquals(rsm.meshes[1].vertices[2].y, 500)
			assertEquals(rsm.meshes[1].vertices[2].z, 600)
			assertEquals(rsm.meshes[1].vertices[3].x, 700)
			assertEquals(rsm.meshes[1].vertices[3].y, 800)
			assertEquals(rsm.meshes[1].vertices[3].z, 900)

			assertEquals(#rsm.meshes[1].textureVertices, 2)
			assertEquals(rsm.meshes[1].textureVertices[1].color.alpha, 1)
			assertEquals(rsm.meshes[1].textureVertices[1].color.red, 2)
			assertEquals(rsm.meshes[1].textureVertices[1].color.green, 3)
			assertEquals(rsm.meshes[1].textureVertices[1].color.blue, 4)
			assertEquals(rsm.meshes[1].textureVertices[1].u, 0.5)
			assertEquals(rsm.meshes[1].textureVertices[1].v, 0.25)
			assertEquals(rsm.meshes[1].textureVertices[2].color.alpha, 5)
			assertEquals(rsm.meshes[1].textureVertices[2].color.red, 6)
			assertEquals(rsm.meshes[1].textureVertices[2].color.green, 7)
			assertEquals(rsm.meshes[1].textureVertices[2].color.blue, 8)
			assertEquals(rsm.meshes[1].textureVertices[2].u, 1)
			assertEquals(rsm.meshes[1].textureVertices[2].v, 0.75)

			assertEquals(#rsm.meshes[1].triFaces, 2)
			assertEquals(#rsm.meshes[1].triFaces[1].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[1].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[1], 10)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[2], 11)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[3], 12)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[1], 13)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[2], 14)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[3], 15)
			assertEquals(rsm.meshes[1].triFaces[1].textureID, 8)
			assertEquals(rsm.meshes[1].triFaces[1].isTwoSided, true)
			assertEquals(#rsm.meshes[1].triFaces[1].smoothingGroupIDs, 1)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupSizeInBytes, 24)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupIDs[1], 42)
			assertEquals(#rsm.meshes[1].triFaces[2].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[2].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[1], 16)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[2], 17)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[3], 18)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[1], 19)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[2], 20)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[3], 21)
			assertEquals(rsm.meshes[1].triFaces[2].textureID, 7)
			assertEquals(rsm.meshes[1].triFaces[2].isTwoSided, false)
			assertEquals(#rsm.meshes[1].triFaces[2].smoothingGroupIDs, 1)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupSizeInBytes, 24)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupIDs[1], 123)

			assertEquals(#rsm.meshes[1].rotationKeyframes, 2)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].frameID, 134)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.x, 22)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.y, 23)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.z, 24)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.w, 25)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].frameID, 77)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.x, 26)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.y, 27)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.z, 28)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.w, 29)

			assertEquals(#rsm.meshes[1].scaleKeyframes, 0)
			assertEquals(#rsm.meshes[1].translationKeyframes, 0)
			assertEquals(#rsm.meshes[1].textureAnimations, 0)

			assertEquals(#rsm.scaleKeyframes, 2)
			assertEquals(rsm.scaleKeyframes[1].frameID, 333)
			assertEquals(rsm.scaleKeyframes[1].scale.x, 1)
			assertEquals(rsm.scaleKeyframes[1].scale.y, 2)
			assertEquals(rsm.scaleKeyframes[1].scale.z, 3)
			assertEquals(rsm.scaleKeyframes[1].mysteryBytes, 0)
			assertEquals(rsm.scaleKeyframes[2].frameID, 666)
			assertEquals(rsm.scaleKeyframes[2].scale.x, 3)
			assertEquals(rsm.scaleKeyframes[2].scale.y, 2)
			assertEquals(rsm.scaleKeyframes[2].scale.z, 1)
			assertEquals(rsm.scaleKeyframes[2].mysteryBytes, 0)

			assertEquals(#rsm.boundingBoxes, 2)
			assertEquals(rsm.boundingBoxes[1].dimensions.x, 9)
			assertEquals(rsm.boundingBoxes[1].dimensions.y, 8)
			assertEquals(rsm.boundingBoxes[1].dimensions.z, 7)
			assertEquals(rsm.boundingBoxes[1].position.x, 6)
			assertEquals(rsm.boundingBoxes[1].position.y, 5)
			assertEquals(rsm.boundingBoxes[1].position.z, 4)
			assertEquals(rsm.boundingBoxes[1].rotation.x, 3)
			assertEquals(rsm.boundingBoxes[1].rotation.y, 2)
			assertEquals(rsm.boundingBoxes[1].rotation.z, 1)
			assertEquals(rsm.boundingBoxes[1].unknownFlag, 0)
			assertEquals(rsm.boundingBoxes[2].dimensions.x, 90)
			assertEquals(rsm.boundingBoxes[2].dimensions.y, 80)
			assertEquals(rsm.boundingBoxes[2].dimensions.z, 70)
			assertEquals(rsm.boundingBoxes[2].position.x, 60)
			assertEquals(rsm.boundingBoxes[2].position.y, 50)
			assertEquals(rsm.boundingBoxes[2].position.z, 40)
			assertEquals(rsm.boundingBoxes[2].rotation.x, 30)
			assertEquals(rsm.boundingBoxes[2].rotation.y, 20)
			assertEquals(rsm.boundingBoxes[2].rotation.z, 10)
			assertEquals(rsm.boundingBoxes[2].unknownFlag, 0)
		end)

		it("should be able to decode RSM files using version 1.5 of the format", function()
			local rsm = RagnarokRSM()
			rsm:DecodeFileContents(RSM_EXAMPLE_FILE_0105)

			assertEquals(rsm.signature, "GRSM")
			assertEquals(rsm.version, 1.5)
			assertEquals(rsm.animationDurationInMilliseconds, 6000)
			assertEquals(rsm.shadingModeID, RagnarokRSM.SHADING_MODE_UNLIT)
			assertEquals(rsm.opacity, 1)

			assertEquals(#rsm.texturePaths, 2)
			assertEquals(rsm.texturePaths[1], "dir/tex1.bmp")
			assertEquals(rsm.texturePaths[2], "asdf/texture.bmp")

			assertEquals(#rsm.rootNodes, 1)
			assertEquals(rsm.rootNodes[1], "TransformationRoot")
			assertEquals(#rsm.meshes, 1)

			assertEquals(rsm.meshes[1].name, "TransformationRoot")
			assertEquals(rsm.meshes[1].parentNodeName, "")
			assertEquals(#rsm.meshes[1].texturePaths, 0)
			assertEquals(#rsm.meshes[1].textureIndices, 2)
			assertEquals(rsm.meshes[1].textureIndices[1], 0)
			assertEquals(rsm.meshes[1].textureIndices[2], 1)

			assertEquals(rsm.meshes[1].initialPlacementMatrix.x1, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y3, -1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z2, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w4, 1)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.x, -1.87600004673, 1E-3)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.y, -25, 1E-3)
			assertEqualNumbers(rsm.meshes[1].positionRelativeToParentNode.z, -55.540000915527, 1E-3)
			assertEquals(rsm.meshes[1].rotationAngleInRadians, 0)
			assertEquals(rsm.meshes[1].rotationAxis.x, 0)
			assertEquals(rsm.meshes[1].rotationAxis.y, 0)
			assertEquals(rsm.meshes[1].rotationAxis.z, 0)
			assertEquals(rsm.meshes[1].scale.x, 1)
			assertEquals(rsm.meshes[1].scale.y, 1)
			assertEquals(rsm.meshes[1].scale.z, 1)

			assertEquals(#rsm.meshes[1].vertices, 3)
			assertEquals(rsm.meshes[1].vertices[1].x, 100)
			assertEquals(rsm.meshes[1].vertices[1].y, 200)
			assertEquals(rsm.meshes[1].vertices[1].z, 300)
			assertEquals(rsm.meshes[1].vertices[2].x, 400)
			assertEquals(rsm.meshes[1].vertices[2].y, 500)
			assertEquals(rsm.meshes[1].vertices[2].z, 600)
			assertEquals(rsm.meshes[1].vertices[3].x, 700)
			assertEquals(rsm.meshes[1].vertices[3].y, 800)
			assertEquals(rsm.meshes[1].vertices[3].z, 900)

			assertEquals(#rsm.meshes[1].textureVertices, 2)
			assertEquals(rsm.meshes[1].textureVertices[1].color.alpha, 1)
			assertEquals(rsm.meshes[1].textureVertices[1].color.red, 2)
			assertEquals(rsm.meshes[1].textureVertices[1].color.green, 3)
			assertEquals(rsm.meshes[1].textureVertices[1].color.blue, 4)
			assertEquals(rsm.meshes[1].textureVertices[1].u, 0.5)
			assertEquals(rsm.meshes[1].textureVertices[1].v, 0.25)
			assertEquals(rsm.meshes[1].textureVertices[2].color.alpha, 5)
			assertEquals(rsm.meshes[1].textureVertices[2].color.red, 6)
			assertEquals(rsm.meshes[1].textureVertices[2].color.green, 7)
			assertEquals(rsm.meshes[1].textureVertices[2].color.blue, 8)
			assertEquals(rsm.meshes[1].textureVertices[2].u, 1)
			assertEquals(rsm.meshes[1].textureVertices[2].v, 0.75)

			assertEquals(#rsm.meshes[1].triFaces, 2)
			assertEquals(#rsm.meshes[1].triFaces[1].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[1].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[1], 10)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[2], 11)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[3], 12)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[1], 13)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[2], 14)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[3], 15)
			assertEquals(rsm.meshes[1].triFaces[1].textureID, 8)
			assertEquals(rsm.meshes[1].triFaces[1].isTwoSided, true)
			assertEquals(#rsm.meshes[1].triFaces[1].smoothingGroupIDs, 1)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupSizeInBytes, 24)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupIDs[1], 42)
			assertEquals(#rsm.meshes[1].triFaces[2].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[2].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[1], 16)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[2], 17)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[3], 18)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[1], 19)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[2], 20)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[3], 21)
			assertEquals(rsm.meshes[1].triFaces[2].textureID, 7)
			assertEquals(rsm.meshes[1].triFaces[2].isTwoSided, false)
			assertEquals(#rsm.meshes[1].triFaces[2].smoothingGroupIDs, 1)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupSizeInBytes, 24)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupIDs[1], 123)

			assertEquals(#rsm.meshes[1].rotationKeyframes, 2)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].frameID, 134)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.x, 22)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.y, 23)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.z, 24)
			assertEquals(rsm.meshes[1].rotationKeyframes[1].rotationQuaternion.w, 25)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].frameID, 77)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.x, 26)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.y, 27)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.z, 28)
			assertEquals(rsm.meshes[1].rotationKeyframes[2].rotationQuaternion.w, 29)

			assertEquals(#rsm.meshes[1].scaleKeyframes, 0)
			assertEquals(#rsm.meshes[1].translationKeyframes, 0)
			assertEquals(#rsm.meshes[1].textureAnimations, 0)

			assertEquals(#rsm.scaleKeyframes, 2)
			assertEquals(rsm.scaleKeyframes[1].frameID, 333)
			assertEquals(rsm.scaleKeyframes[1].scale.x, 1)
			assertEquals(rsm.scaleKeyframes[1].scale.y, 2)
			assertEquals(rsm.scaleKeyframes[1].scale.z, 3)
			assertEquals(rsm.scaleKeyframes[1].mysteryBytes, 0)
			assertEquals(rsm.scaleKeyframes[2].frameID, 666)
			assertEquals(rsm.scaleKeyframes[2].scale.x, 3)
			assertEquals(rsm.scaleKeyframes[2].scale.y, 2)
			assertEquals(rsm.scaleKeyframes[2].scale.z, 1)
			assertEquals(rsm.scaleKeyframes[2].mysteryBytes, 0)

			assertEquals(#rsm.boundingBoxes, 2)
			assertEquals(rsm.boundingBoxes[1].dimensions.x, 9)
			assertEquals(rsm.boundingBoxes[1].dimensions.y, 8)
			assertEquals(rsm.boundingBoxes[1].dimensions.z, 7)
			assertEquals(rsm.boundingBoxes[1].position.x, 6)
			assertEquals(rsm.boundingBoxes[1].position.y, 5)
			assertEquals(rsm.boundingBoxes[1].position.z, 4)
			assertEquals(rsm.boundingBoxes[1].rotation.x, 3)
			assertEquals(rsm.boundingBoxes[1].rotation.y, 2)
			assertEquals(rsm.boundingBoxes[1].rotation.z, 1)
			assertEquals(rsm.boundingBoxes[1].unknownFlag, 0)
			assertEquals(rsm.boundingBoxes[2].dimensions.x, 90)
			assertEquals(rsm.boundingBoxes[2].dimensions.y, 80)
			assertEquals(rsm.boundingBoxes[2].dimensions.z, 70)
			assertEquals(rsm.boundingBoxes[2].position.x, 60)
			assertEquals(rsm.boundingBoxes[2].position.y, 50)
			assertEquals(rsm.boundingBoxes[2].position.z, 40)
			assertEquals(rsm.boundingBoxes[2].rotation.x, 30)
			assertEquals(rsm.boundingBoxes[2].rotation.y, 20)
			assertEquals(rsm.boundingBoxes[2].rotation.z, 10)
			assertEquals(rsm.boundingBoxes[2].unknownFlag, 0)
		end)

		it("should be able to decode RSM files using version 2.2 of the format", function()
			local rsm = RagnarokRSM()
			rsm:DecodeFileContents(RSM_EXAMPLE_FILE_0202)

			assertEquals(rsm.signature, "GRSM")
			assertEquals(rsm.version, 2.2)
			assertEqualNumbers(rsm.animationDurationInMilliseconds, 3162.1621621622, 1E-3)
			assertEquals(rsm.shadingModeID, RagnarokRSM.SHADING_MODE_SMOOTH)
			assertEqualNumbers(rsm.opacity, 0.98823529411765, 1E-3)
			assertEquals(rsm.animationFPS, 37)
			assertEquals(#rsm.texturePaths, 2)
			assertEquals(rsm.texturePaths[1], "hmm/texture.jpg")
			assertEquals(rsm.texturePaths[2], "asdf/texture2.bmp")
			assertEquals(#rsm.rootNodes, 2)
			assertEquals(rsm.rootNodes[1], "TransformationRootA")
			assertEquals(rsm.rootNodes[2], "TransformationRootB")
			assertEquals(#rsm.meshes, 1)
			assertEquals(rsm.meshes[1].name, "TransformationRootA")
			assertEquals(rsm.meshes[1].parentNodeName, "")
			assertEquals(#rsm.meshes[1].texturePaths, 0)
			assertEquals(#rsm.meshes[1].textureIndices, 1)
			assertEquals(rsm.meshes[1].textureIndices[1], 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x1, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.x4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y2, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.y4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z3, 1)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.z4, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w1, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w2, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w3, 0)
			assertEquals(rsm.meshes[1].initialPlacementMatrix.w4, 1)
			assertEquals(rsm.meshes[1].positionRelativeToParentNode.x, 1)
			assertEquals(rsm.meshes[1].positionRelativeToParentNode.y, 2)
			assertEquals(rsm.meshes[1].positionRelativeToParentNode.z, 3)
			assertEquals(rsm.meshes[1].rotationAngleInRadians, 0)
			assertEquals(rsm.meshes[1].rotationAxis.x, 0)
			assertEquals(rsm.meshes[1].rotationAxis.y, 0)
			assertEquals(rsm.meshes[1].rotationAxis.z, 0)
			assertEquals(rsm.meshes[1].scale.x, 1)
			assertEquals(rsm.meshes[1].scale.y, 1)
			assertEquals(rsm.meshes[1].scale.z, 1)
			assertEquals(#rsm.meshes[1].vertices, 5)
			assertEquals(#rsm.meshes[1].textureVertices, 5)

			assertEquals(#rsm.meshes[1].triFaces, 2)
			assertEquals(#rsm.meshes[1].triFaces[1].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[1].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[1], 1)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[2], 3)
			assertEquals(rsm.meshes[1].triFaces[1].vertexIDs[3], 4)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[1], 1)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[2], 3)
			assertEquals(rsm.meshes[1].triFaces[1].textureVertexIDs[3], 4)
			assertEquals(rsm.meshes[1].triFaces[1].textureID, 0)
			assertEquals(rsm.meshes[1].triFaces[1].isTwoSided, true)
			assertEquals(#rsm.meshes[1].triFaces[1].smoothingGroupIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupSizeInBytes, 32)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupIDs[1], 1)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupIDs[2], 1)
			assertEquals(rsm.meshes[1].triFaces[1].smoothingGroupIDs[3], 1)
			assertEquals(#rsm.meshes[1].triFaces[2].vertexIDs, 3)
			assertEquals(#rsm.meshes[1].triFaces[2].textureVertexIDs, 3)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[1], 4)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[2], 2)
			assertEquals(rsm.meshes[1].triFaces[2].vertexIDs[3], 0)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[1], 4)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[2], 2)
			assertEquals(rsm.meshes[1].triFaces[2].textureVertexIDs[3], 0)
			assertEquals(rsm.meshes[1].triFaces[2].textureID, 0)
			assertEquals(rsm.meshes[1].triFaces[2].isTwoSided, true)
			assertEquals(#rsm.meshes[1].triFaces[2].smoothingGroupIDs, 1)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupSizeInBytes, 24)
			assertEquals(rsm.meshes[1].triFaces[2].smoothingGroupIDs[1], 1)

			assertEquals(#rsm.meshes[1].scaleKeyframes, 2)
			assertEquals(rsm.meshes[1].scaleKeyframes[1].frameID, 500)
			assertEquals(rsm.meshes[1].scaleKeyframes[1].scale.x, 1000)
			assertEquals(rsm.meshes[1].scaleKeyframes[1].scale.y, 1500)
			assertEquals(rsm.meshes[1].scaleKeyframes[1].scale.z, 2000)
			assertEquals(rsm.meshes[1].scaleKeyframes[1].mysteryBytes, 2500)

			assertEquals(rsm.meshes[1].scaleKeyframes[2].frameID, 3000)
			assertEquals(rsm.meshes[1].scaleKeyframes[2].scale.x, 3500)
			assertEquals(rsm.meshes[1].scaleKeyframes[2].scale.y, 4000)
			assertEquals(rsm.meshes[1].scaleKeyframes[2].scale.z, 4500)
			assertEquals(rsm.meshes[1].scaleKeyframes[2].mysteryBytes, 5000)

			assertEquals(#rsm.meshes[1].rotationKeyframes, 0)

			assertEquals(#rsm.meshes[1].translationKeyframes, 2)
			assertEquals(rsm.meshes[1].translationKeyframes[1].frameID, 100)
			assertEquals(rsm.meshes[1].translationKeyframes[1].translationVector.x, 2)
			assertEquals(rsm.meshes[1].translationKeyframes[1].translationVector.y, 4)
			assertEquals(rsm.meshes[1].translationKeyframes[1].translationVector.z, 8)
			assertEquals(rsm.meshes[1].translationKeyframes[2].frameID, 200)
			assertEquals(rsm.meshes[1].translationKeyframes[2].translationVector.x, 16)
			assertEquals(rsm.meshes[1].translationKeyframes[2].translationVector.y, 32)
			assertEquals(rsm.meshes[1].translationKeyframes[2].translationVector.z, 64)

			assertEquals(#rsm.meshes[1].textureAnimations, 0)

			assertEquals(#rsm.scaleKeyframes, 0)
			assertEquals(#rsm.boundingBoxes, 0)
		end)

		it("should be able to decode RSM files using version 2.3 of the format", function()
			local rsm = RagnarokRSM()
			rsm:DecodeFileContents(RSM_EXAMPLE_FILE_0203)

			assertEquals(#rsm.texturePaths, 0)
			assertEquals(#rsm.meshes[1].textureIndices, 0)
			assertEquals(#rsm.meshes[1].texturePaths, 2)
			assertEquals(rsm.meshes[1].texturePaths[1], "hmm/texture.jpg")
			assertEquals(rsm.meshes[1].texturePaths[2], "asdf/texture2.bmp")

			assertEquals(#rsm.meshes[1].textureAnimations, 2)
			assertEquals(rsm.meshes[1].textureAnimations[1].textureID, 777)
			assertEquals(rsm.meshes[1].textureAnimations[1].numAnimations, 1)
			assertEquals(rsm.meshes[1].textureAnimations[2].textureID, 888)
			assertEquals(rsm.meshes[1].textureAnimations[2].numAnimations, 4)
			assertEquals(#rsm.meshes[1].textureAnimations[1].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_U], 2)
			assertEquals(
				rsm.meshes[1].textureAnimations[1].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_U][1].frameID,
				5
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[1].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_U][1].offset,
				0.5
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[1].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_U][2].frameID,
				6
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[1].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_U][2].offset,
				0.25
			)

			assertEquals(#rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_V], 1)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_V][1].frameID,
				7
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_TRANSLATE_V][1].offset,
				1
			)

			assertEquals(#rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_U], 1)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_U][1].frameID,
				8
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_U][1].offset,
				2
			)

			assertEquals(#rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_V], 1)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_V][1].frameID,
				9
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_MULTIPLY_V][1].offset,
				4
			)

			assertEquals(#rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_ROTATE_UV], 1)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_ROTATE_UV][1].frameID,
				10
			)
			assertEquals(
				rsm.meshes[1].textureAnimations[2].keyframes[RagnarokRSM.TEXTUREANIMATION_ROTATE_UV][1].offset,
				8
			)

			assertEquals(#rsm.boundingBoxes, 0)

			rsm:DecodeFileContents(RSM_EXAMPLE_FILE_0203 .. "\000\000\000\000") -- Zero bounding boxes
			assertEquals(#rsm.boundingBoxes, 0)
		end)
	end)
end)
