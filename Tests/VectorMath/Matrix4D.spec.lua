local Matrix4D = require("Core.VectorMath.Matrix4D")

describe("Matrix4D", function()
	it("should return an empty 4x4 matrix in row-major notation", function()
		local matrix = Matrix4D()

		assertEquals(matrix.x1, 0)
		assertEquals(matrix.x2, 0)
		assertEquals(matrix.x3, 0)
		assertEquals(matrix.x4, 0)
		assertEquals(matrix.y1, 0)
		assertEquals(matrix.y2, 0)
		assertEquals(matrix.y3, 0)
		assertEquals(matrix.y4, 0)
		assertEquals(matrix.z1, 0)
		assertEquals(matrix.z2, 0)
		assertEquals(matrix.z3, 0)
		assertEquals(matrix.z4, 0)
		assertEquals(matrix.w1, 0)
		assertEquals(matrix.w2, 0)
		assertEquals(matrix.w3, 0)
		assertEquals(matrix.w4, 0)
	end)

	describe("CreateIdentity", function()
		it("should return a 4x4 unit matrix in row-major notation", function()
			local matrix = Matrix4D:CreateIdentity()

			assertEquals(matrix.x1, 1)
			assertEquals(matrix.x2, 0)
			assertEquals(matrix.x3, 0)
			assertEquals(matrix.x4, 0)
			assertEquals(matrix.y1, 0)
			assertEquals(matrix.y2, 1)
			assertEquals(matrix.y3, 0)
			assertEquals(matrix.y4, 0)
			assertEquals(matrix.z1, 0)
			assertEquals(matrix.z2, 0)
			assertEquals(matrix.z3, 1)
			assertEquals(matrix.z4, 0)
			assertEquals(matrix.w1, 0)
			assertEquals(matrix.w2, 0)
			assertEquals(matrix.w3, 0)
			assertEquals(matrix.w4, 1)
		end)

		describe("SetColumn", function()
			it("should throw if an invalid column index was passed", function()
				assertThrows(function()
					local matrix = Matrix4D()
					matrix:SetColumn(0, 1, 2, 3, 4)
				end, "Invalid column index 0 (valid indices are one through four)")

				assertThrows(function()
					local matrix = Matrix4D()
					matrix:SetColumn(5, 1, 2, 3, 4)
				end, "Invalid column index 5 (valid indices are one through four)")
			end)

			it("should set the components for the given column", function()
				local matrix = Matrix4D()
				matrix:SetColumn(1, 1, 2, 3, 4)
				matrix:SetColumn(2, 5, 6, 7, 8)
				matrix:SetColumn(3, 9, 10, 11, 12)
				matrix:SetColumn(4, 13, 14, 15, 16)

				assertEquals(matrix.x1, 1)
				assertEquals(matrix.x2, 5)
				assertEquals(matrix.x3, 9)
				assertEquals(matrix.x4, 13)
				assertEquals(matrix.y1, 2)
				assertEquals(matrix.y2, 6)
				assertEquals(matrix.y3, 10)
				assertEquals(matrix.y4, 14)
				assertEquals(matrix.z1, 3)
				assertEquals(matrix.z2, 7)
				assertEquals(matrix.z3, 11)
				assertEquals(matrix.z4, 15)
				assertEquals(matrix.w1, 4)
				assertEquals(matrix.w2, 8)
				assertEquals(matrix.w3, 12)
				assertEquals(matrix.w4, 16)
			end)
		end)
	end)
end)
