local json = require("json")

local RagnarokTools = {}

local path_basename = path.basename
local path_extname = path.extname
local table_insert = table.insert

local RagnarokGRF = require("Core.FileFormats.RagnarokGRF")

function RagnarokTools:GenerateMapListFromGRF(grfFilePath)
	grfFilePath = grfFilePath or "data.grf"

	local grf = RagnarokGRF()
	grf:Open(grfFilePath)
	grf:Close()
	local fileList = grf:GetFileList()

	local completeMaps = {}
	local incompleteMaps = {}

	printf("Processing %d file entries ...", #fileList)

	for index, fileEntry in ipairs(fileList) do
		local extension = path_extname(fileEntry.name)
		local isRSW = (extension == ".rsw")

		if isRSW then
			local mapID = path_basename(fileEntry.name, ".rsw")

			local expectedGAT = "data/" .. mapID .. ".gat"
			local expectedGND = "data/" .. mapID .. ".gnd"

			local hasGAT = fileList[expectedGAT]
			local hasGND = fileList[expectedGND]

			if not hasGAT then
				printf("Pruned: %s (GAT file is missing)", mapID)
			end

			if not hasGND then
				printf("Pruned: %s (GND file is missing)", mapID)
			end

			if hasGAT and hasGND then
				table_insert(completeMaps, mapID)
			else
				table_insert(incompleteMaps, mapID)
			end
		end
	end

	printf("Finished processing %d maps (%d removed)", #completeMaps, #incompleteMaps)

	return completeMaps, incompleteMaps
end

function RagnarokTools:SaveMapDatabaseAsJSON(mapList, outputFilePath)
	outputFilePath = outputFilePath or "DB/maps-autogenerated.json"

	local jsonString = json.prettier(mapList)

	printf("Saving JSON-encoded map list to %s", outputFilePath)

	C_FileSystem.WriteFile(outputFilePath, jsonString)
end

return RagnarokTools
